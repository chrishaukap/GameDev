# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _angel
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _angel.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _angel.PySwigIterator_value(*args)
    def incr(*args): return _angel.PySwigIterator_incr(*args)
    def decr(*args): return _angel.PySwigIterator_decr(*args)
    def distance(*args): return _angel.PySwigIterator_distance(*args)
    def equal(*args): return _angel.PySwigIterator_equal(*args)
    def copy(*args): return _angel.PySwigIterator_copy(*args)
    def next(*args): return _angel.PySwigIterator_next(*args)
    def previous(*args): return _angel.PySwigIterator_previous(*args)
    def advance(*args): return _angel.PySwigIterator_advance(*args)
    def __eq__(*args): return _angel.PySwigIterator___eq__(*args)
    def __ne__(*args): return _angel.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _angel.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _angel.PySwigIterator___isub__(*args)
    def __add__(*args): return _angel.PySwigIterator___add__(*args)
    def __sub__(*args): return _angel.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _angel.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr
    def iterator(*args): return _angel.StringSet_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _angel.StringSet___nonzero__(*args)
    def __len__(*args): return _angel.StringSet___len__(*args)
    def append(*args): return _angel.StringSet_append(*args)
    def __contains__(*args): return _angel.StringSet___contains__(*args)
    def __getitem__(*args): return _angel.StringSet___getitem__(*args)
    def __init__(self, *args): 
        this = _angel.new_StringSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _angel.StringSet_empty(*args)
    def size(*args): return _angel.StringSet_size(*args)
    def clear(*args): return _angel.StringSet_clear(*args)
    def swap(*args): return _angel.StringSet_swap(*args)
    def count(*args): return _angel.StringSet_count(*args)
    def begin(*args): return _angel.StringSet_begin(*args)
    def end(*args): return _angel.StringSet_end(*args)
    def rbegin(*args): return _angel.StringSet_rbegin(*args)
    def rend(*args): return _angel.StringSet_rend(*args)
    def erase(*args): return _angel.StringSet_erase(*args)
    def find(*args): return _angel.StringSet_find(*args)
    def lower_bound(*args): return _angel.StringSet_lower_bound(*args)
    def upper_bound(*args): return _angel.StringSet_upper_bound(*args)
    def equal_range(*args): return _angel.StringSet_equal_range(*args)
    def insert(*args): return _angel.StringSet_insert(*args)
    __swig_destroy__ = _angel.delete_StringSet
    __del__ = lambda self : None;
StringSet_swigregister = _angel.StringSet_swigregister
StringSet_swigregister(StringSet)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _angel.StringList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _angel.StringList___nonzero__(*args)
    def __len__(*args): return _angel.StringList___len__(*args)
    def pop(*args): return _angel.StringList_pop(*args)
    def __getslice__(*args): return _angel.StringList___getslice__(*args)
    def __setslice__(*args): return _angel.StringList___setslice__(*args)
    def __delslice__(*args): return _angel.StringList___delslice__(*args)
    def __delitem__(*args): return _angel.StringList___delitem__(*args)
    def __getitem__(*args): return _angel.StringList___getitem__(*args)
    def __setitem__(*args): return _angel.StringList___setitem__(*args)
    def append(*args): return _angel.StringList_append(*args)
    def empty(*args): return _angel.StringList_empty(*args)
    def size(*args): return _angel.StringList_size(*args)
    def clear(*args): return _angel.StringList_clear(*args)
    def swap(*args): return _angel.StringList_swap(*args)
    def get_allocator(*args): return _angel.StringList_get_allocator(*args)
    def begin(*args): return _angel.StringList_begin(*args)
    def end(*args): return _angel.StringList_end(*args)
    def rbegin(*args): return _angel.StringList_rbegin(*args)
    def rend(*args): return _angel.StringList_rend(*args)
    def pop_back(*args): return _angel.StringList_pop_back(*args)
    def erase(*args): return _angel.StringList_erase(*args)
    def __init__(self, *args): 
        this = _angel.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _angel.StringList_push_back(*args)
    def front(*args): return _angel.StringList_front(*args)
    def back(*args): return _angel.StringList_back(*args)
    def assign(*args): return _angel.StringList_assign(*args)
    def resize(*args): return _angel.StringList_resize(*args)
    def insert(*args): return _angel.StringList_insert(*args)
    def reserve(*args): return _angel.StringList_reserve(*args)
    def capacity(*args): return _angel.StringList_capacity(*args)
    __swig_destroy__ = _angel.delete_StringList
    __del__ = lambda self : None;
StringList_swigregister = _angel.StringList_swigregister
StringList_swigregister(StringList)

class Vec2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _angel.Vec2i_X_set
    __swig_getmethods__["X"] = _angel.Vec2i_X_get
    if _newclass:X = _swig_property(_angel.Vec2i_X_get, _angel.Vec2i_X_set)
    __swig_setmethods__["Y"] = _angel.Vec2i_Y_set
    __swig_getmethods__["Y"] = _angel.Vec2i_Y_get
    if _newclass:Y = _swig_property(_angel.Vec2i_Y_get, _angel.Vec2i_Y_set)
    def __init__(self, *args): 
        this = _angel.new_Vec2i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_Vec2i
    __del__ = lambda self : None;
Vec2i_swigregister = _angel.Vec2i_swigregister
Vec2i_swigregister(Vec2i)

class VectorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _angel.VectorList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _angel.VectorList___nonzero__(*args)
    def __len__(*args): return _angel.VectorList___len__(*args)
    def pop(*args): return _angel.VectorList_pop(*args)
    def __getslice__(*args): return _angel.VectorList___getslice__(*args)
    def __setslice__(*args): return _angel.VectorList___setslice__(*args)
    def __delslice__(*args): return _angel.VectorList___delslice__(*args)
    def __delitem__(*args): return _angel.VectorList___delitem__(*args)
    def __getitem__(*args): return _angel.VectorList___getitem__(*args)
    def __setitem__(*args): return _angel.VectorList___setitem__(*args)
    def append(*args): return _angel.VectorList_append(*args)
    def empty(*args): return _angel.VectorList_empty(*args)
    def size(*args): return _angel.VectorList_size(*args)
    def clear(*args): return _angel.VectorList_clear(*args)
    def swap(*args): return _angel.VectorList_swap(*args)
    def get_allocator(*args): return _angel.VectorList_get_allocator(*args)
    def begin(*args): return _angel.VectorList_begin(*args)
    def end(*args): return _angel.VectorList_end(*args)
    def rbegin(*args): return _angel.VectorList_rbegin(*args)
    def rend(*args): return _angel.VectorList_rend(*args)
    def pop_back(*args): return _angel.VectorList_pop_back(*args)
    def erase(*args): return _angel.VectorList_erase(*args)
    def __init__(self, *args): 
        this = _angel.new_VectorList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _angel.VectorList_push_back(*args)
    def front(*args): return _angel.VectorList_front(*args)
    def back(*args): return _angel.VectorList_back(*args)
    def assign(*args): return _angel.VectorList_assign(*args)
    def resize(*args): return _angel.VectorList_resize(*args)
    def insert(*args): return _angel.VectorList_insert(*args)
    def reserve(*args): return _angel.VectorList_reserve(*args)
    def capacity(*args): return _angel.VectorList_capacity(*args)
    __swig_destroy__ = _angel.delete_VectorList
    __del__ = lambda self : None;
VectorList_swigregister = _angel.VectorList_swigregister
VectorList_swigregister(VectorList)

class Vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _angel.Vector2_X_set
    __swig_getmethods__["X"] = _angel.Vector2_X_get
    if _newclass:X = _swig_property(_angel.Vector2_X_get, _angel.Vector2_X_set)
    __swig_setmethods__["Y"] = _angel.Vector2_Y_set
    __swig_getmethods__["Y"] = _angel.Vector2_Y_get
    if _newclass:Y = _swig_property(_angel.Vector2_Y_get, _angel.Vector2_Y_set)
    __swig_setmethods__["Zero"] = _angel.Vector2_Zero_set
    __swig_getmethods__["Zero"] = _angel.Vector2_Zero_get
    if _newclass:Zero = _swig_property(_angel.Vector2_Zero_get, _angel.Vector2_Zero_set)
    __swig_setmethods__["One"] = _angel.Vector2_One_set
    __swig_getmethods__["One"] = _angel.Vector2_One_get
    if _newclass:One = _swig_property(_angel.Vector2_One_get, _angel.Vector2_One_set)
    __swig_setmethods__["UnitX"] = _angel.Vector2_UnitX_set
    __swig_getmethods__["UnitX"] = _angel.Vector2_UnitX_get
    if _newclass:UnitX = _swig_property(_angel.Vector2_UnitX_get, _angel.Vector2_UnitX_set)
    __swig_setmethods__["UnitY"] = _angel.Vector2_UnitY_set
    __swig_getmethods__["UnitY"] = _angel.Vector2_UnitY_get
    if _newclass:UnitY = _swig_property(_angel.Vector2_UnitY_get, _angel.Vector2_UnitY_set)
    def __init__(self, *args): 
        this = _angel.new_Vector2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Length(*args): return _angel.Vector2_Length(*args)
    def LengthSquared(*args): return _angel.Vector2_LengthSquared(*args)
    __swig_getmethods__["Distance"] = lambda x: _angel.Vector2_Distance
    if _newclass:Distance = staticmethod(_angel.Vector2_Distance)
    __swig_getmethods__["DistanceSquared"] = lambda x: _angel.Vector2_DistanceSquared
    if _newclass:DistanceSquared = staticmethod(_angel.Vector2_DistanceSquared)
    __swig_getmethods__["Dot"] = lambda x: _angel.Vector2_Dot
    if _newclass:Dot = staticmethod(_angel.Vector2_Dot)
    def Normalize(*args): return _angel.Vector2_Normalize(*args)
    __swig_getmethods__["Reflect"] = lambda x: _angel.Vector2_Reflect
    if _newclass:Reflect = staticmethod(_angel.Vector2_Reflect)
    __swig_getmethods__["Min"] = lambda x: _angel.Vector2_Min
    if _newclass:Min = staticmethod(_angel.Vector2_Min)
    __swig_getmethods__["Max"] = lambda x: _angel.Vector2_Max
    if _newclass:Max = staticmethod(_angel.Vector2_Max)
    __swig_getmethods__["Clamp"] = lambda x: _angel.Vector2_Clamp
    if _newclass:Clamp = staticmethod(_angel.Vector2_Clamp)
    __swig_getmethods__["Lerp"] = lambda x: _angel.Vector2_Lerp
    if _newclass:Lerp = staticmethod(_angel.Vector2_Lerp)
    __swig_getmethods__["Negate"] = lambda x: _angel.Vector2_Negate
    if _newclass:Negate = staticmethod(_angel.Vector2_Negate)
    __swig_getmethods__["Rotate"] = lambda x: _angel.Vector2_Rotate
    if _newclass:Rotate = staticmethod(_angel.Vector2_Rotate)
    def __eq__(*args): return _angel.Vector2___eq__(*args)
    def __ne__(*args): return _angel.Vector2___ne__(*args)
    def __neg__(*args): return _angel.Vector2___neg__(*args)
    def __sub__(*args): return _angel.Vector2___sub__(*args)
    def __add__(*args): return _angel.Vector2___add__(*args)
    def __div__(*args): return _angel.Vector2___div__(*args)
    def __mul__(*args): return _angel.Vector2___mul__(*args)
    __swig_destroy__ = _angel.delete_Vector2
    __del__ = lambda self : None;
Vector2_swigregister = _angel.Vector2_swigregister
Vector2_swigregister(Vector2)
cvar = _angel.cvar
Vector2_Distance = _angel.Vector2_Distance
Vector2_DistanceSquared = _angel.Vector2_DistanceSquared
Vector2_Dot = _angel.Vector2_Dot
Vector2_Reflect = _angel.Vector2_Reflect
Vector2_Min = _angel.Vector2_Min
Vector2_Max = _angel.Vector2_Max
Vector2_Clamp = _angel.Vector2_Clamp
Vector2_Lerp = _angel.Vector2_Lerp
Vector2_Negate = _angel.Vector2_Negate
Vector2_Rotate = _angel.Vector2_Rotate

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["R"] = _angel.Color_R_set
    __swig_getmethods__["R"] = _angel.Color_R_get
    if _newclass:R = _swig_property(_angel.Color_R_get, _angel.Color_R_set)
    __swig_setmethods__["G"] = _angel.Color_G_set
    __swig_getmethods__["G"] = _angel.Color_G_get
    if _newclass:G = _swig_property(_angel.Color_G_get, _angel.Color_G_set)
    __swig_setmethods__["B"] = _angel.Color_B_set
    __swig_getmethods__["B"] = _angel.Color_B_get
    if _newclass:B = _swig_property(_angel.Color_B_get, _angel.Color_B_set)
    __swig_setmethods__["A"] = _angel.Color_A_set
    __swig_getmethods__["A"] = _angel.Color_A_get
    if _newclass:A = _swig_property(_angel.Color_A_get, _angel.Color_A_set)
    def __init__(self, *args): 
        this = _angel.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _angel.Color___eq__(*args)
    def __ne__(*args): return _angel.Color___ne__(*args)
    def __sub__(*args): return _angel.Color___sub__(*args)
    def __add__(*args): return _angel.Color___add__(*args)
    def __div__(*args): return _angel.Color___div__(*args)
    def __mul__(*args): return _angel.Color___mul__(*args)
    __swig_destroy__ = _angel.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _angel.Color_swigregister
Color_swigregister(Color)

class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _angel.new_Message(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetMessageName(*args): return _angel.Message_GetMessageName(*args)
    def GetSender(*args): return _angel.Message_GetSender(*args)
    __swig_destroy__ = _angel.delete_Message
    __del__ = lambda self : None;
Message_swigregister = _angel.Message_swigregister
Message_swigregister(Message)

class MessageListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _angel.delete_MessageListener
    __del__ = lambda self : None;
    def ReceiveMessage(*args): return _angel.MessageListener_ReceiveMessage(*args)
    def __init__(self, *args): 
        if self.__class__ == MessageListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _angel.new_MessageListener(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _angel.disown_MessageListener(self)
        return weakref_proxy(self)
MessageListener_swigregister = _angel.MessageListener_swigregister
MessageListener_swigregister(MessageListener)

class Switchboard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switchboard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Switchboard, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.Switchboard_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.Switchboard_GetInstance)
    def Broadcast(*args): return _angel.Switchboard_Broadcast(*args)
    def DeferredBroadcast(*args): return _angel.Switchboard_DeferredBroadcast(*args)
    def SubscribeTo(*args): return _angel.Switchboard_SubscribeTo(*args)
    def UnsubscribeFrom(*args): return _angel.Switchboard_UnsubscribeFrom(*args)
    def GetSubscribersTo(*args): return _angel.Switchboard_GetSubscribersTo(*args)
    def GetSubscriptionsFor(*args): return _angel.Switchboard_GetSubscriptionsFor(*args)
    __swig_destroy__ = _angel.delete_Switchboard
    __del__ = lambda self : None;
Switchboard_swigregister = _angel.Switchboard_swigregister
Switchboard_swigregister(Switchboard)
Switchboard_GetInstance = _angel.Switchboard_GetInstance

class Renderable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Renderable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Renderable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Destroy(*args): return _angel.Renderable_Destroy(*args)
    def IsDestroyed(*args): return _angel.Renderable_IsDestroyed(*args)
    def GetLayer(*args): return _angel.Renderable_GetLayer(*args)
    def Update(*args): return _angel.Renderable_Update(*args)
    def Render(*args): return _angel.Renderable_Render(*args)
    __swig_destroy__ = _angel.delete_Renderable
    __del__ = lambda self : None;
Renderable_swigregister = _angel.Renderable_swigregister
Renderable_swigregister(Renderable)

class World(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.World_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.World_GetInstance)
    def ResetWorld(*args): return _angel.World_ResetWorld(*args)
    def StopGame(*args): return _angel.World_StopGame(*args)
    def GetCurrentTimeSeconds(*args): return _angel.World_GetCurrentTimeSeconds(*args)
    def SetBackgroundColor(*args): return _angel.World_SetBackgroundColor(*args)
    def Add(*args): return _angel.World_Add(*args)
    def Remove(*args): return _angel.World_Remove(*args)
    def UpdateLayer(*args): return _angel.World_UpdateLayer(*args)
    def NameLayer(*args): return _angel.World_NameLayer(*args)
    def GetLayerByName(*args): return _angel.World_GetLayerByName(*args)
    def DrawDebugLine(*args): return _angel.World_DrawDebugLine(*args)
    def PurgeDebugDrawing(*args): return _angel.World_PurgeDebugDrawing(*args)
    def IsSimulationOn(*args): return _angel.World_IsSimulationOn(*args)
    def SetupPhysics(*args): return _angel.World_SetupPhysics(*args)
    def IsPhysicsSetUp(*args): return _angel.World_IsPhysicsSetUp(*args)
    def RegisterConsole(*args): return _angel.World_RegisterConsole(*args)
    def GetConsole(*args): return _angel.World_GetConsole(*args)
    __swig_destroy__ = _angel.delete_World
    __del__ = lambda self : None;
World_swigregister = _angel.World_swigregister
World_swigregister(World)
World_GetInstance = _angel.World_GetInstance

class DeveloperLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeveloperLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeveloperLog, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _angel.delete_DeveloperLog
    __del__ = lambda self : None;
    def Log(*args): return _angel.DeveloperLog_Log(*args)
    def Printf(*args): return _angel.DeveloperLog_Printf(*args)
DeveloperLog_swigregister = _angel.DeveloperLog_swigregister
DeveloperLog_swigregister(DeveloperLog)

class ConsoleLog(DeveloperLog):
    __swig_setmethods__ = {}
    for _s in [DeveloperLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleLog, name, value)
    __swig_getmethods__ = {}
    for _s in [DeveloperLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleLog, name)
    __repr__ = _swig_repr
    def Log(*args): return _angel.ConsoleLog_Log(*args)
    def __init__(self, *args): 
        this = _angel.new_ConsoleLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_ConsoleLog
    __del__ = lambda self : None;
ConsoleLog_swigregister = _angel.ConsoleLog_swigregister
ConsoleLog_swigregister(ConsoleLog)

class FileLog(DeveloperLog):
    __swig_setmethods__ = {}
    for _s in [DeveloperLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLog, name, value)
    __swig_getmethods__ = {}
    for _s in [DeveloperLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileLog, name)
    __repr__ = _swig_repr
    __swig_getmethods__["MakeLogFileName"] = lambda x: _angel.FileLog_MakeLogFileName
    if _newclass:MakeLogFileName = staticmethod(_angel.FileLog_MakeLogFileName)
    def __init__(self, *args): 
        this = _angel.new_FileLog(*args)
        try: self.this.append(this)
        except: self.this = this
    def Log(*args): return _angel.FileLog_Log(*args)
    __swig_destroy__ = _angel.delete_FileLog
    __del__ = lambda self : None;
FileLog_swigregister = _angel.FileLog_swigregister
FileLog_swigregister(FileLog)
FileLog_MakeLogFileName = _angel.FileLog_MakeLogFileName

class SystemLog(DeveloperLog):
    __swig_setmethods__ = {}
    for _s in [DeveloperLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemLog, name, value)
    __swig_getmethods__ = {}
    for _s in [DeveloperLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemLog, name)
    __repr__ = _swig_repr
    def Log(*args): return _angel.SystemLog_Log(*args)
    def __init__(self, *args): 
        this = _angel.new_SystemLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_SystemLog
    __del__ = lambda self : None;
SystemLog_swigregister = _angel.SystemLog_swigregister
SystemLog_swigregister(SystemLog)

class CompoundLog(DeveloperLog):
    __swig_setmethods__ = {}
    for _s in [DeveloperLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundLog, name, value)
    __swig_getmethods__ = {}
    for _s in [DeveloperLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundLog, name)
    __repr__ = _swig_repr
    def AddLog(*args): return _angel.CompoundLog_AddLog(*args)
    def Log(*args): return _angel.CompoundLog_Log(*args)
    __swig_getmethods__["GetSystemLog"] = lambda x: _angel.CompoundLog_GetSystemLog
    if _newclass:GetSystemLog = staticmethod(_angel.CompoundLog_GetSystemLog)
    def __init__(self, *args): 
        this = _angel.new_CompoundLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_CompoundLog
    __del__ = lambda self : None;
CompoundLog_swigregister = _angel.CompoundLog_swigregister
CompoundLog_swigregister(CompoundLog)
CompoundLog_GetSystemLog = _angel.CompoundLog_GetSystemLog

class Console(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Console, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Console, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _angel.delete_Console
    __del__ = lambda self : None;
    def WriteToOutput(*args): return _angel.Console_WriteToOutput(*args)
    def SetPrompt(*args): return _angel.Console_SetPrompt(*args)
    def Execute(*args): return _angel.Console_Execute(*args)
    def GetCompletions(*args): return _angel.Console_GetCompletions(*args)
    def __init__(self, *args): 
        if self.__class__ == Console:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _angel.new_Console(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _angel.disown_Console(self)
        return weakref_proxy(self)
Console_swigregister = _angel.Console_swigregister
Console_swigregister(Console)

class Tuning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tuning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tuning, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.Tuning_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.Tuning_GetInstance)
    def GetVariables(*args): return _angel.Tuning_GetVariables(*args)
    def GetInt(*args): return _angel.Tuning_GetInt(*args)
    def GetFloat(*args): return _angel.Tuning_GetFloat(*args)
    def GetString(*args): return _angel.Tuning_GetString(*args)
    def GetVector(*args): return _angel.Tuning_GetVector(*args)
    def SetInt(*args): return _angel.Tuning_SetInt(*args)
    def SetFloat(*args): return _angel.Tuning_SetFloat(*args)
    def SetString(*args): return _angel.Tuning_SetString(*args)
    def SetVector(*args): return _angel.Tuning_SetVector(*args)
    def AddToRuntimeTuningList(*args): return _angel.Tuning_AddToRuntimeTuningList(*args)
    def IsRuntimeTuned(*args): return _angel.Tuning_IsRuntimeTuned(*args)
    __swig_destroy__ = _angel.delete_Tuning
    __del__ = lambda self : None;
Tuning_swigregister = _angel.Tuning_swigregister
Tuning_swigregister(Tuning)
Tuning_GetInstance = _angel.Tuning_GetInstance

class SoundDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.SoundDevice_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.SoundDevice_GetInstance)
    def LoadSample(*args): return _angel.SoundDevice_LoadSample(*args)
    def PlaySound(*args): return _angel.SoundDevice_PlaySound(*args)
    def StopSound(*args): return _angel.SoundDevice_StopSound(*args)
    def PauseSound(*args): return _angel.SoundDevice_PauseSound(*args)
    def IsPlaying(*args): return _angel.SoundDevice_IsPlaying(*args)
    def IsPaused(*args): return _angel.SoundDevice_IsPaused(*args)
    def SetPan(*args): return _angel.SoundDevice_SetPan(*args)
    def SetVolume(*args): return _angel.SoundDevice_SetVolume(*args)
    __swig_destroy__ = _angel.delete_SoundDevice
    __del__ = lambda self : None;
SoundDevice_swigregister = _angel.SoundDevice_swigregister
SoundDevice_swigregister(SoundDevice)
SoundDevice_GetInstance = _angel.SoundDevice_GetInstance

class ControllerInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LeftThumbstickX"] = _angel.ControllerInput_LeftThumbstickX_set
    __swig_getmethods__["LeftThumbstickX"] = _angel.ControllerInput_LeftThumbstickX_get
    if _newclass:LeftThumbstickX = _swig_property(_angel.ControllerInput_LeftThumbstickX_get, _angel.ControllerInput_LeftThumbstickX_set)
    __swig_setmethods__["LeftThumbstickY"] = _angel.ControllerInput_LeftThumbstickY_set
    __swig_getmethods__["LeftThumbstickY"] = _angel.ControllerInput_LeftThumbstickY_get
    if _newclass:LeftThumbstickY = _swig_property(_angel.ControllerInput_LeftThumbstickY_get, _angel.ControllerInput_LeftThumbstickY_set)
    __swig_setmethods__["RightThumbstickX"] = _angel.ControllerInput_RightThumbstickX_set
    __swig_getmethods__["RightThumbstickX"] = _angel.ControllerInput_RightThumbstickX_get
    if _newclass:RightThumbstickX = _swig_property(_angel.ControllerInput_RightThumbstickX_get, _angel.ControllerInput_RightThumbstickX_set)
    __swig_setmethods__["RightThumbstickY"] = _angel.ControllerInput_RightThumbstickY_set
    __swig_getmethods__["RightThumbstickY"] = _angel.ControllerInput_RightThumbstickY_get
    if _newclass:RightThumbstickY = _swig_property(_angel.ControllerInput_RightThumbstickY_get, _angel.ControllerInput_RightThumbstickY_set)
    __swig_setmethods__["LeftTriggerValue"] = _angel.ControllerInput_LeftTriggerValue_set
    __swig_getmethods__["LeftTriggerValue"] = _angel.ControllerInput_LeftTriggerValue_get
    if _newclass:LeftTriggerValue = _swig_property(_angel.ControllerInput_LeftTriggerValue_get, _angel.ControllerInput_LeftTriggerValue_set)
    __swig_setmethods__["RightTriggerValue"] = _angel.ControllerInput_RightTriggerValue_set
    __swig_getmethods__["RightTriggerValue"] = _angel.ControllerInput_RightTriggerValue_get
    if _newclass:RightTriggerValue = _swig_property(_angel.ControllerInput_RightTriggerValue_get, _angel.ControllerInput_RightTriggerValue_set)
    __swig_setmethods__["Buttons"] = _angel.ControllerInput_Buttons_set
    __swig_getmethods__["Buttons"] = _angel.ControllerInput_Buttons_get
    if _newclass:Buttons = _swig_property(_angel.ControllerInput_Buttons_get, _angel.ControllerInput_Buttons_set)
    def __init__(self, *args): 
        this = _angel.new_ControllerInput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_ControllerInput
    __del__ = lambda self : None;
ControllerInput_swigregister = _angel.ControllerInput_swigregister
ControllerInput_swigregister(ControllerInput)

class ControllerManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.ControllerManager_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.ControllerManager_GetInstance)
    def GetController(*args): return _angel.ControllerManager_GetController(*args)
    __swig_destroy__ = _angel.delete_ControllerManager
    __del__ = lambda self : None;
ControllerManager_swigregister = _angel.ControllerManager_swigregister
ControllerManager_swigregister(ControllerManager)
ControllerManager_GetInstance = _angel.ControllerManager_GetInstance

class Controller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Controller, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetState(*args): return _angel.Controller_GetState(*args)
    def GetLeftThumbVec2(*args): return _angel.Controller_GetLeftThumbVec2(*args)
    def GetRightThumbVec2(*args): return _angel.Controller_GetRightThumbVec2(*args)
    def GetLeftThumbstick(*args): return _angel.Controller_GetLeftThumbstick(*args)
    def GetRightThumbstick(*args): return _angel.Controller_GetRightThumbstick(*args)
    def GetRightTrigger(*args): return _angel.Controller_GetRightTrigger(*args)
    def GetLeftTrigger(*args): return _angel.Controller_GetLeftTrigger(*args)
    def IsButtonDown(*args): return _angel.Controller_IsButtonDown(*args)
    def IsAButtonDown(*args): return _angel.Controller_IsAButtonDown(*args)
    def IsBButtonDown(*args): return _angel.Controller_IsBButtonDown(*args)
    def IsXButtonDown(*args): return _angel.Controller_IsXButtonDown(*args)
    def IsYButtonDown(*args): return _angel.Controller_IsYButtonDown(*args)
    def IsLeftThumbstickButtonDown(*args): return _angel.Controller_IsLeftThumbstickButtonDown(*args)
    def IsRightThumbstickButtonDown(*args): return _angel.Controller_IsRightThumbstickButtonDown(*args)
    def IsStartButtonDown(*args): return _angel.Controller_IsStartButtonDown(*args)
    def IsBackButtonDown(*args): return _angel.Controller_IsBackButtonDown(*args)
    def IsLeftBumperDown(*args): return _angel.Controller_IsLeftBumperDown(*args)
    def IsRightBumperDown(*args): return _angel.Controller_IsRightBumperDown(*args)
    def IsLeftTriggerPressed(*args): return _angel.Controller_IsLeftTriggerPressed(*args)
    def IsRightTriggerPressed(*args): return _angel.Controller_IsRightTriggerPressed(*args)
    def SetLeftVibrationRaw(*args): return _angel.Controller_SetLeftVibrationRaw(*args)
    def SetRightVibrationRaw(*args): return _angel.Controller_SetRightVibrationRaw(*args)
    def SetLeftVibration(*args): return _angel.Controller_SetLeftVibration(*args)
    def SetRightVibration(*args): return _angel.Controller_SetRightVibration(*args)
    def GetLeftVibration(*args): return _angel.Controller_GetLeftVibration(*args)
    def GetRightVibration(*args): return _angel.Controller_GetRightVibration(*args)
    def IsConnected(*args): return _angel.Controller_IsConnected(*args)
    def GetControllerID(*args): return _angel.Controller_GetControllerID(*args)
    __swig_destroy__ = _angel.delete_Controller
    __del__ = lambda self : None;
Controller_swigregister = _angel.Controller_swigregister
Controller_swigregister(Controller)

MOUSE_LEFT = _angel.MOUSE_LEFT
MOUSE_MIDDLE = _angel.MOUSE_MIDDLE
MOUSE_RIGHT = _angel.MOUSE_RIGHT
class MouseListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseListener, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == MouseListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _angel.new_MouseListener(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_MouseListener
    __del__ = lambda self : None;
    def MouseMotionEvent(*args): return _angel.MouseListener_MouseMotionEvent(*args)
    def MouseDownEvent(*args): return _angel.MouseListener_MouseDownEvent(*args)
    def MouseUpEvent(*args): return _angel.MouseListener_MouseUpEvent(*args)
    def __disown__(self):
        self.this.disown()
        _angel.disown_MouseListener(self)
        return weakref_proxy(self)
MouseListener_swigregister = _angel.MouseListener_swigregister
MouseListener_swigregister(MouseListener)

class ActorSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActorSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActorSet, name)
    __repr__ = _swig_repr
    def iterator(*args): return _angel.ActorSet_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _angel.ActorSet___nonzero__(*args)
    def __len__(*args): return _angel.ActorSet___len__(*args)
    def append(*args): return _angel.ActorSet_append(*args)
    def __contains__(*args): return _angel.ActorSet___contains__(*args)
    def __getitem__(*args): return _angel.ActorSet___getitem__(*args)
    def __init__(self, *args): 
        this = _angel.new_ActorSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _angel.ActorSet_empty(*args)
    def size(*args): return _angel.ActorSet_size(*args)
    def clear(*args): return _angel.ActorSet_clear(*args)
    def swap(*args): return _angel.ActorSet_swap(*args)
    def count(*args): return _angel.ActorSet_count(*args)
    def begin(*args): return _angel.ActorSet_begin(*args)
    def end(*args): return _angel.ActorSet_end(*args)
    def rbegin(*args): return _angel.ActorSet_rbegin(*args)
    def rend(*args): return _angel.ActorSet_rend(*args)
    def erase(*args): return _angel.ActorSet_erase(*args)
    def find(*args): return _angel.ActorSet_find(*args)
    def lower_bound(*args): return _angel.ActorSet_lower_bound(*args)
    def upper_bound(*args): return _angel.ActorSet_upper_bound(*args)
    def equal_range(*args): return _angel.ActorSet_equal_range(*args)
    def insert(*args): return _angel.ActorSet_insert(*args)
    __swig_destroy__ = _angel.delete_ActorSet
    __del__ = lambda self : None;
ActorSet_swigregister = _angel.ActorSet_swigregister
ActorSet_swigregister(ActorSet)

class ActorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActorList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _angel.ActorList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _angel.ActorList___nonzero__(*args)
    def __len__(*args): return _angel.ActorList___len__(*args)
    def pop(*args): return _angel.ActorList_pop(*args)
    def __getslice__(*args): return _angel.ActorList___getslice__(*args)
    def __setslice__(*args): return _angel.ActorList___setslice__(*args)
    def __delslice__(*args): return _angel.ActorList___delslice__(*args)
    def __delitem__(*args): return _angel.ActorList___delitem__(*args)
    def __getitem__(*args): return _angel.ActorList___getitem__(*args)
    def __setitem__(*args): return _angel.ActorList___setitem__(*args)
    def append(*args): return _angel.ActorList_append(*args)
    def empty(*args): return _angel.ActorList_empty(*args)
    def size(*args): return _angel.ActorList_size(*args)
    def clear(*args): return _angel.ActorList_clear(*args)
    def swap(*args): return _angel.ActorList_swap(*args)
    def get_allocator(*args): return _angel.ActorList_get_allocator(*args)
    def begin(*args): return _angel.ActorList_begin(*args)
    def end(*args): return _angel.ActorList_end(*args)
    def rbegin(*args): return _angel.ActorList_rbegin(*args)
    def rend(*args): return _angel.ActorList_rend(*args)
    def pop_back(*args): return _angel.ActorList_pop_back(*args)
    def erase(*args): return _angel.ActorList_erase(*args)
    def __init__(self, *args): 
        this = _angel.new_ActorList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _angel.ActorList_push_back(*args)
    def front(*args): return _angel.ActorList_front(*args)
    def back(*args): return _angel.ActorList_back(*args)
    def assign(*args): return _angel.ActorList_assign(*args)
    def resize(*args): return _angel.ActorList_resize(*args)
    def insert(*args): return _angel.ActorList_insert(*args)
    def reserve(*args): return _angel.ActorList_reserve(*args)
    def capacity(*args): return _angel.ActorList_capacity(*args)
    __swig_destroy__ = _angel.delete_ActorList
    __del__ = lambda self : None;
ActorList_swigregister = _angel.ActorList_swigregister
ActorList_swigregister(ActorList)

SAT_None = _angel.SAT_None
SAT_Loop = _angel.SAT_Loop
SAT_PingPong = _angel.SAT_PingPong
SAT_OneShot = _angel.SAT_OneShot
ADS_Square = _angel.ADS_Square
ADS_Circle = _angel.ADS_Circle
class Actor(Renderable,MessageListener):
    __swig_setmethods__ = {}
    for _s in [Renderable,MessageListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actor, name, value)
    __swig_getmethods__ = {}
    for _s in [Renderable,MessageListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Actor:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _angel.new_Actor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_Actor
    __del__ = lambda self : None;
    def SetSize(*args): return _angel.Actor_SetSize(*args)
    def GetSize(*args): return _angel.Actor_GetSize(*args)
    def SetPosition(*args): return _angel.Actor_SetPosition(*args)
    def GetPosition(*args): return _angel.Actor_GetPosition(*args)
    def SetRotation(*args): return _angel.Actor_SetRotation(*args)
    def GetRotation(*args): return _angel.Actor_GetRotation(*args)
    def SetColor(*args): return _angel.Actor_SetColor(*args)
    def GetColor(*args): return _angel.Actor_GetColor(*args)
    def SetAlpha(*args): return _angel.Actor_SetAlpha(*args)
    def GetAlpha(*args): return _angel.Actor_GetAlpha(*args)
    def SetDrawShape(*args): return _angel.Actor_SetDrawShape(*args)
    def MoveTo(*args): return _angel.Actor_MoveTo(*args)
    def RotateTo(*args): return _angel.Actor_RotateTo(*args)
    def ChangeColorTo(*args): return _angel.Actor_ChangeColorTo(*args)
    def ChangeSizeTo(*args): return _angel.Actor_ChangeSizeTo(*args)
    def GetSpriteTexture(*args): return _angel.Actor_GetSpriteTexture(*args)
    def SetSprite(*args): return _angel.Actor_SetSprite(*args)
    def ClearSpriteInfo(*args): return _angel.Actor_ClearSpriteInfo(*args)
    def LoadSpriteFrames(*args): return _angel.Actor_LoadSpriteFrames(*args)
    def PlaySpriteAnimation(*args): return _angel.Actor_PlaySpriteAnimation(*args)
    def SetSpriteFrame(*args): return _angel.Actor_SetSpriteFrame(*args)
    def GetSpriteFrame(*args): return _angel.Actor_GetSpriteFrame(*args)
    def IsSpriteAnimPlaying(*args): return _angel.Actor_IsSpriteAnimPlaying(*args)
    def SetUVs(*args): return _angel.Actor_SetUVs(*args)
    def GetUVs(*args): return _angel.Actor_GetUVs(*args)
    def IsTagged(*args): return _angel.Actor_IsTagged(*args)
    def Tag(*args): return _angel.Actor_Tag(*args)
    def Untag(*args): return _angel.Actor_Untag(*args)
    def GetTags(*args): return _angel.Actor_GetTags(*args)
    def SetName(*args): return _angel.Actor_SetName(*args)
    def GetName(*args): return _angel.Actor_GetName(*args)
    __swig_getmethods__["GetNamed"] = lambda x: _angel.Actor_GetNamed
    if _newclass:GetNamed = staticmethod(_angel.Actor_GetNamed)
    def ReceiveMessage(*args): return _angel.Actor_ReceiveMessage(*args)
    def SetLayer(*args): return _angel.Actor_SetLayer(*args)
    def Update(*args): return _angel.Actor_Update(*args)
    def GetSelf(*args): return _angel.Actor_GetSelf(*args)
    def GetClassName(*args): return _angel.Actor_GetClassName(*args)
    def __disown__(self):
        self.this.disown()
        _angel.disown_Actor(self)
        return weakref_proxy(self)
Actor_swigregister = _angel.Actor_swigregister
Actor_swigregister(Actor)
Actor_GetNamed = _angel.Actor_GetNamed

class TagCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagCollection, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.TagCollection_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.TagCollection_GetInstance)
    def GetObjectsTagged(*args): return _angel.TagCollection_GetObjectsTagged(*args)
    def GetTagList(*args): return _angel.TagCollection_GetTagList(*args)
    __swig_destroy__ = _angel.delete_TagCollection
    __del__ = lambda self : None;
TagCollection_swigregister = _angel.TagCollection_swigregister
TagCollection_swigregister(TagCollection)
TagCollection_GetInstance = _angel.TagCollection_GetInstance

class Camera(Actor):
    __swig_setmethods__ = {}
    for _s in [Actor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [Actor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _angel.Camera_GetInstance
    if _newclass:GetInstance = staticmethod(_angel.Camera_GetInstance)
    __swig_getmethods__["ResizeCallback"] = lambda x: _angel.Camera_ResizeCallback
    if _newclass:ResizeCallback = staticmethod(_angel.Camera_ResizeCallback)
    def Reset(*args): return _angel.Camera_Reset(*args)
    def GetWindowHeight(*args): return _angel.Camera_GetWindowHeight(*args)
    def GetWindowWidth(*args): return _angel.Camera_GetWindowWidth(*args)
    def GetViewRadius(*args): return _angel.Camera_GetViewRadius(*args)
    def GetWorldMaxVertex(*args): return _angel.Camera_GetWorldMaxVertex(*args)
    def GetWorldMinVertex(*args): return _angel.Camera_GetWorldMinVertex(*args)
    def SetPosition(*args): return _angel.Camera_SetPosition(*args)
    def GetPosition(*args): return _angel.Camera_GetPosition(*args)
    def GetZ(*args): return _angel.Camera_GetZ(*args)
    def GetZForViewRadius(*args): return _angel.Camera_GetZForViewRadius(*args)
    def GetNearClipDist(*args): return _angel.Camera_GetNearClipDist(*args)
    def GetFarClipDist(*args): return _angel.Camera_GetFarClipDist(*args)
    def SetZByViewRadius(*args): return _angel.Camera_SetZByViewRadius(*args)
    def SetNearClipDist(*args): return _angel.Camera_SetNearClipDist(*args)
    def SetFarClipDist(*args): return _angel.Camera_SetFarClipDist(*args)
    def SetViewCenter(*args): return _angel.Camera_SetViewCenter(*args)
    def GetViewCenter(*args): return _angel.Camera_GetViewCenter(*args)
    __swig_destroy__ = _angel.delete_Camera
    __del__ = lambda self : None;
Camera_swigregister = _angel.Camera_swigregister
Camera_swigregister(Camera)
Camera_GetInstance = _angel.Camera_GetInstance
Camera_ResizeCallback = _angel.Camera_ResizeCallback

class PhysicsActor(Actor):
    __swig_setmethods__ = {}
    for _s in [Actor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicsActor, name, value)
    __swig_getmethods__ = {}
    for _s in [Actor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicsActor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _angel.new_PhysicsActor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_PhysicsActor
    __del__ = lambda self : None;
    SHAPETYPE_BOX = _angel.PhysicsActor_SHAPETYPE_BOX
    SHAPETYPE_CIRCLE = _angel.PhysicsActor_SHAPETYPE_CIRCLE
    def SetDensity(*args): return _angel.PhysicsActor_SetDensity(*args)
    def SetFriction(*args): return _angel.PhysicsActor_SetFriction(*args)
    def SetRestitution(*args): return _angel.PhysicsActor_SetRestitution(*args)
    def SetShapeType(*args): return _angel.PhysicsActor_SetShapeType(*args)
    def SetIsSensor(*args): return _angel.PhysicsActor_SetIsSensor(*args)
    def SetGroupIndex(*args): return _angel.PhysicsActor_SetGroupIndex(*args)
    def SetFixedRotation(*args): return _angel.PhysicsActor_SetFixedRotation(*args)
    def InitPhysics(*args): return _angel.PhysicsActor_InitPhysics(*args)
    def CustomInitPhysics(*args): return _angel.PhysicsActor_CustomInitPhysics(*args)
    def ApplyForce(*args): return _angel.PhysicsActor_ApplyForce(*args)
    def ApplyLocalForce(*args): return _angel.PhysicsActor_ApplyLocalForce(*args)
    def ApplyTorque(*args): return _angel.PhysicsActor_ApplyTorque(*args)
    def ApplyImpulse(*args): return _angel.PhysicsActor_ApplyImpulse(*args)
    def SetSize(*args): return _angel.PhysicsActor_SetSize(*args)
    def SetDrawSize(*args): return _angel.PhysicsActor_SetDrawSize(*args)
    def SetPosition(*args): return _angel.PhysicsActor_SetPosition(*args)
    def SetRotation(*args): return _angel.PhysicsActor_SetRotation(*args)
PhysicsActor_swigregister = _angel.PhysicsActor_swigregister
PhysicsActor_swigregister(PhysicsActor)

class ParticleActor(Actor):
    __swig_setmethods__ = {}
    for _s in [Actor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleActor, name, value)
    __swig_getmethods__ = {}
    for _s in [Actor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleActor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _angel.new_ParticleActor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _angel.delete_ParticleActor
    __del__ = lambda self : None;
    def SetParticlesPerSecond(*args): return _angel.ParticleActor_SetParticlesPerSecond(*args)
    def SetSystemLifetime(*args): return _angel.ParticleActor_SetSystemLifetime(*args)
    def SetParticleLifetime(*args): return _angel.ParticleActor_SetParticleLifetime(*args)
    def SetSpread(*args): return _angel.ParticleActor_SetSpread(*args)
    def SetEndScale(*args): return _angel.ParticleActor_SetEndScale(*args)
    def SetEndColor(*args): return _angel.ParticleActor_SetEndColor(*args)
    def SetSpeedRange(*args): return _angel.ParticleActor_SetSpeedRange(*args)
    def SetGravity(*args): return _angel.ParticleActor_SetGravity(*args)
    def SetMaxParticles(*args): return _angel.ParticleActor_SetMaxParticles(*args)
ParticleActor_swigregister = _angel.ParticleActor_swigregister
ParticleActor_swigregister(ParticleActor)

class TextActor(Actor):
    __swig_setmethods__ = {}
    for _s in [Actor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextActor, name, value)
    __swig_getmethods__ = {}
    for _s in [Actor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextActor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _angel.new_TextActor(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetFont(*args): return _angel.TextActor_GetFont(*args)
    def SetFont(*args): return _angel.TextActor_SetFont(*args)
    def GetDisplayString(*args): return _angel.TextActor_GetDisplayString(*args)
    def SetDisplayString(*args): return _angel.TextActor_SetDisplayString(*args)
    def GetAlignment(*args): return _angel.TextActor_GetAlignment(*args)
    def SetAlignment(*args): return _angel.TextActor_SetAlignment(*args)
    def GetLineSpacing(*args): return _angel.TextActor_GetLineSpacing(*args)
    def SetLineSpacing(*args): return _angel.TextActor_SetLineSpacing(*args)
    __swig_destroy__ = _angel.delete_TextActor
    __del__ = lambda self : None;
TextActor_swigregister = _angel.TextActor_swigregister
TextActor_swigregister(TextActor)



